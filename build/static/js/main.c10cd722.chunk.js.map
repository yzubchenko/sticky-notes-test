{"version":3,"sources":["components/Radio/styles.module.css","components/ColorRadio/styles.module.css","components/NoteBoard/styles.module.css","components/Note/styles.module.css","components/Menu/styles.module.css","components/NoteResizer/styles.module.css","store/menu/slice.ts","store/note/slice.ts","store/menu/epics.ts","store/menu/getters.ts","api/addNoteAsync.ts","components/ColorRadio/index.tsx","components/Radio/index.tsx","components/Menu/index.tsx","store/noteBoard/getters.ts","store/note/getters.ts","api/fetchNotesAsync.ts","api/updateNoteAsync.ts","store/noteBoard/slice.ts","store/note/epics.ts","api/deleteNoteAsync.ts","components/NoteResizer/index.tsx","components/Note/index.tsx","components/ResizeCapturer/index.tsx","components/NoteBoard/index.tsx","components/App/index.tsx","store/index.ts","index.tsx"],"names":["module","exports","NoteDefaultSizes","NoteColors","noteSlice","createSlice","name","initialState","order","notes","reducers","fetchNoteSuccess","state","payload","createNoteSuccess","note","id","bringToFrontNote","sort","a","b","startMoveNote","action","isMoving","startResizeNote","isResizing","releaseNote","updateNote","removeNote","filter","orderedNoteId","updateNoteText","text","startEditNote","editingNoteId","stopEditNote","undefined","actions","reducer","menuSlice","noteSize","SMALL","noteColor","YELLOW","selectNoteSize","selectNoteColor","createNote","createAction","menuEpics","action$","state$","pipe","match","mergeMap","size","value","menu","width","height","MEDIUM","LARGE","noteData","color","store","getNoteColor","position","x","y","Promise","resolve","setTimeout","noteId","Date","getTime","JSON","parse","localStorage","getItem","setItem","stringify","push","status","result","map","ColorRadio","defaultChecked","onChange","className","styles","ColorRadio_root","type","radio","label","htmlFor","radioBody","style","backgroundColor","checkMark","Radio","children","textContainer","mapDispatchToProps","connector","connect","props","onSizeChange","e","target","onColorChange","Menu_root","GREEN","LAVENDER","BLUE","createButton","onClick","getBoundedPosition","rect","excludeTrashZone","boundingRect","getNoteBoardSize","trashZoneBoundingRect","getTrashZoneBoundingRect","trashZoneWidth","right","left","extra","Math","min","max","noteBoard","isTrashZoneActive","isRectIntersectsTrashZone","top","bottom","getNoteById","getEditingNoteId","getBoundedNoteById","DEFAULT_NOTE","fetchNotesAsync","updateNoteAsync","noteBoardSlice","applyNoteBoardBoundingRect","setTrashZoneBoundingRect","setTrashZoneStatus","mousemove$","fromEvent","document","mouseup$","fetchNotes","checkStopEditingNote","checkNeedRemoveNote","noteEpics","switchMap","pluck","pickPosition","targetNote","move","preventDefault","updatedNote","clientX","clientY","of","takeUntil","tap","calculatedWidth","calculatedHeight","boardSize","updatedSize","updatedPosition","from","Stretcher_root","onMouseDown","stopPropagation","onMouseUp","onMouseOut","onBlur","isActive","componentStyle","editableTextRef","useRef","checkDrop","useEffect","textArea","current","focus","selectionStart","length","selectionEnd","Note_root","ref","editableText","onDoubleClick","ResizeCapturer","captureRef","updateSize","getBoundingClientRect","onResize","useLayoutEffect","window","addEventListener","removeEventListener","boardRef","trashZoneRef","trashZoneActiveClass","trashZoneActive","NoteBoard_root","trashZone","key","epicMiddleware","createEpicMiddleware","configureStore","noteReducer","noteBoardReducer","menuReducer","middleware","getDefaultMiddleware","thunk","run","combineEpics","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c10cd722.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColorRadio_root\":\"styles_ColorRadio_root__ctxBV\",\"radio\":\"styles_radio__3XpTn\",\"checkMark\":\"styles_checkMark__wUh3h\",\"radioBody\":\"styles_radioBody__1-__b\",\"textContainer\":\"styles_textContainer__2CM9o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColorRadio_root\":\"styles_ColorRadio_root__1heIV\",\"radio\":\"styles_radio__3qFSj\",\"checkMark\":\"styles_checkMark__1EthW\",\"radioBody\":\"styles_radioBody__1o0PV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NoteBoard_root\":\"styles_NoteBoard_root__2QAoe\",\"trashZone\":\"styles_trashZone___PyaV\",\"trashZoneActive\":\"styles_trashZoneActive__28bS_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Note_root\":\"styles_Note_root__31-aQ\",\"textContainer\":\"styles_textContainer__Hp-qi\",\"editableText\":\"styles_editableText__25wGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu_root\":\"styles_Menu_root__23Ebv\",\"createButton\":\"styles_createButton__S3Wi6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Stretcher_root\":\"styles_Stretcher_root__g-tEM\"};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type NoteBoardSliceState = {\n    noteSize: NoteDefaultSizes;\n    noteColor: string;\n};\n\nexport enum NoteDefaultSizes {\n    SMALL = 'SMALL',\n    MEDIUM = 'MEDIUM',\n    LARGE = 'LARGE',\n}\n\nexport enum NoteColors {\n    YELLOW = '#efee9d',\n    GREEN = '#d1eaa3',\n    LAVENDER = '#dbc6eb',\n    BLUE = '#abc2e8',\n}\n\nconst menuSlice = createSlice({\n    name: 'menu',\n    initialState: {\n        noteSize: NoteDefaultSizes.SMALL,\n        noteColor: NoteColors.YELLOW,\n    } as NoteBoardSliceState,\n    reducers: {\n        selectNoteSize(state, { payload }: PayloadAction<NoteDefaultSizes>) {\n            state.noteSize = payload;\n        },\n        selectNoteColor(state, { payload }: PayloadAction<string>) {\n            state.noteColor = payload;\n        },\n    },\n});\n\nconst { actions, reducer } = menuSlice;\n\nexport const { selectNoteSize, selectNoteColor } = actions;\n\nexport default reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Note, NoteId, NotePosition } from './types';\n\nexport type NoteSliceState = {\n    editingNoteId?: NoteId;\n    order: NoteId[];\n    notes: { [key in NoteId]: Note };\n};\n\nconst noteSlice = createSlice({\n    name: 'note',\n    initialState: { order: [], notes: {} } as NoteSliceState,\n    reducers: {\n        fetchNoteSuccess(state, { payload }: PayloadAction<NoteSliceState>) {\n            const { notes, order } = payload;\n            state.order = order;\n            state.notes = notes;\n        },\n\n        createNoteSuccess(state, { payload }: PayloadAction<{ note: Note; order: NoteId[] }>) {\n            const { note, order } = payload;\n            state.order = order;\n            state.notes[note.id] = note;\n        },\n\n        bringToFrontNote(state, { payload }: PayloadAction<NoteId>) {\n            const id = payload;\n            state.order = state.order.sort((a: NoteId, b: NoteId) => {\n                if (a === id) {\n                    return 1;\n                }\n                if (b === id) {\n                    return -1;\n                }\n                return 0;\n            });\n        },\n\n        startMoveNote(state, action: PayloadAction<{ id: NoteId; pickPosition: NotePosition }>) {\n            const { id } = action.payload;\n            state.notes[id].isMoving = true;\n        },\n\n        startResizeNote(state, { payload }: PayloadAction<NoteId>) {\n            const id = payload;\n            state.notes[id].isResizing = true;\n        },\n\n        releaseNote(state, { payload }: PayloadAction<NoteId>) {\n            const id = payload;\n            state.notes[id].isMoving = false;\n            state.notes[id].isResizing = false;\n        },\n\n        updateNote(state, { payload }: PayloadAction<Note>) {\n            const note = payload;\n            state.notes[note.id] = note;\n        },\n\n        removeNote(state, { payload }: PayloadAction<NoteId>) {\n            const id = payload;\n            delete state.notes[id];\n            state.order = state.order.filter((orderedNoteId: NoteId) => orderedNoteId !== id);\n        },\n\n        updateNoteText(state, { payload }: PayloadAction<{ id: NoteId; text: string }>) {\n            const { id, text } = payload;\n            const note = state.notes[id];\n            if (note) {\n                note.text = text;\n            }\n        },\n\n        startEditNote(state, { payload }: PayloadAction<NoteId>) {\n            const id = payload;\n            state.editingNoteId = id;\n        },\n\n        stopEditNote(state) {\n            state.editingNoteId = undefined;\n        },\n    },\n});\n\nconst { actions, reducer } = noteSlice;\n\nexport const {\n    fetchNoteSuccess,\n    createNoteSuccess,\n    startMoveNote,\n    startResizeNote,\n    startEditNote,\n    releaseNote,\n    stopEditNote,\n    bringToFrontNote,\n    updateNote,\n    removeNote,\n    updateNoteText,\n} = actions;\n\nexport default reducer;\n","import { ActionsObservable, StateObservable, Epic } from 'redux-observable';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { createAction, Action } from '@reduxjs/toolkit';\nimport { RootStore } from '..';\n\nimport { addNoteAsync, AddNoteResult } from '../../api/addNoteAsync';\n\nimport { createNoteSuccess } from '../note/slice';\nimport { getNoteSize, getNoteColor } from './getters';\nimport { NoteDefaultSizes } from './slice';\n\nconst STICKY_NOTE_DEFAULT_TEXT = 'Double click to edit...';\n\nconst createNote = createAction('createNote');\n\nconst createNoteEpic: Epic = (\n    action$: ActionsObservable<Action>,\n    state$: StateObservable<RootStore>\n) =>\n    action$.pipe(\n        filter(createNote.match),\n        mergeMap(() => {\n            const selectedSize = getNoteSize(state$.value);\n            let size;\n            switch (selectedSize) {\n                case NoteDefaultSizes.SMALL:\n                    size = { width: 150, height: 150 };\n                    break;\n\n                case NoteDefaultSizes.MEDIUM:\n                    size = { width: 250, height: 250 };\n                    break;\n\n                case NoteDefaultSizes.LARGE:\n                    size = { width: 400, height: 400 };\n                    break;\n            }\n            const color = getNoteColor(state$.value);\n            const note = {\n                text: STICKY_NOTE_DEFAULT_TEXT,\n                size,\n                position: { x: 300, y: 300 },\n                color,\n            };\n            return addNoteAsync(note);\n        }),\n        map(({ result }: AddNoteResult) => createNoteSuccess(result))\n    );\n\nexport const menuEpics = [createNoteEpic];\n\nexport { createNote };\n","import { RootStore } from '..';\n\nexport const getNoteSize = (store: RootStore) => store.menu.noteSize;\n\nexport const getNoteColor = (store: RootStore) => store.menu.noteColor;\n","import { Note, NoteId } from '../store/note/types';\n\nexport type AddNoteResult = {\n    status: string;\n    result: {\n        note: Note;\n        order: NoteId[];\n    };\n};\n\nexport const addNoteAsync = (noteData: Omit<Note, 'id'>): Promise<AddNoteResult> =>\n    new Promise((resolve) => {\n        setTimeout(() => {\n            const noteId = new Date().getTime();\n\n            const notes = JSON.parse(localStorage.getItem('notes') || '{}');\n            localStorage.setItem(\n                'notes',\n                JSON.stringify({\n                    ...notes,\n                    [noteId]: { id: noteId, ...noteData },\n                })\n            );\n\n            const order = JSON.parse(localStorage.getItem('order') || '[]');\n            order.push(noteId);\n            localStorage.setItem('order', JSON.stringify(order));\n\n            resolve({\n                status: 'success',\n                result: {\n                    note: {\n                        id: noteId,\n                        ...noteData,\n                    },\n                    order,\n                },\n            });\n        });\n    });\n","import React, { ChangeEvent } from 'react';\n\nimport styles from './styles.module.css';\n\ntype Props = {\n    color: string;\n    defaultChecked?: boolean;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const ColorRadio = ({ color, defaultChecked, onChange }: Props) => {\n    return (\n        <div className={styles.ColorRadio_root}>\n            <input\n                type=\"radio\"\n                id={`radio_${color}`}\n                className={styles.radio}\n                name=\"color\"\n                defaultChecked={defaultChecked}\n                value={color}\n                onChange={onChange}\n            />\n            <label className={styles.label} htmlFor={`radio_${color}`}>\n                <span className={styles.radioBody} style={{ backgroundColor: color }}>\n                    <span className={styles.checkMark} />\n                </span>\n            </label>\n        </div>\n    );\n};\n","import React, { ChangeEvent } from 'react';\nimport styles from './styles.module.css';\n\ntype Props = {\n    name: string;\n    value: string;\n    defaultChecked?: boolean;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const Radio = ({\n    name,\n    value,\n    defaultChecked,\n    onChange,\n    children,\n}: React.PropsWithChildren<Props>) => {\n    return (\n        <div className={styles.ColorRadio_root}>\n            <input\n                type=\"radio\"\n                id={`radio_${value}`}\n                className={styles.radio}\n                name={name}\n                defaultChecked={defaultChecked}\n                value={value}\n                onChange={onChange}\n            />\n            <label className={styles.label} htmlFor={`radio_${value}`}>\n                <span className={styles.radioBody}>\n                    <span className={styles.checkMark} />\n                </span>\n                <span className={styles.textContainer}>{children}</span>\n            </label>\n        </div>\n    );\n};\n","import React from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\n\nimport styles from './styles.module.css';\nimport { createNote } from '../../store/menu/epics';\nimport {\n    selectNoteSize,\n    selectNoteColor,\n    NoteDefaultSizes,\n    NoteColors,\n} from '../../store/menu/slice';\nimport { ColorRadio } from '../ColorRadio';\nimport { Radio } from '../Radio';\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst Menu = (props: Props) => {\n    const onSizeChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n        props.selectNoteSize(NoteDefaultSizes[e.target.value as NoteDefaultSizes]);\n    const onColorChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n        props.selectNoteColor(e.target.value);\n    return (\n        <div className={styles.Menu_root}>\n            <h3>Select Note Size:</h3>\n            <div>\n                <Radio\n                    name=\"size\"\n                    value={NoteDefaultSizes.SMALL}\n                    onChange={onSizeChange}\n                    defaultChecked\n                >\n                    Small\n                </Radio>\n                <Radio name=\"size\" value={NoteDefaultSizes.MEDIUM} onChange={onSizeChange}>\n                    Medium\n                </Radio>\n                <Radio name=\"size\" value={NoteDefaultSizes.LARGE} onChange={onSizeChange}>\n                    Large\n                </Radio>\n            </div>\n\n            <h3>Select Note Color:</h3>\n            <div>\n                <ColorRadio color={NoteColors.YELLOW} onChange={onColorChange} defaultChecked />\n                <ColorRadio color={NoteColors.GREEN} onChange={onColorChange} />\n                <ColorRadio color={NoteColors.LAVENDER} onChange={onColorChange} />\n                <ColorRadio color={NoteColors.BLUE} onChange={onColorChange} />\n            </div>\n\n            <button className={styles.createButton} onClick={() => props.createNote()}>\n                Create Sticker Note\n            </button>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    createNote,\n    selectNoteSize,\n    selectNoteColor,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(Menu);\n","import { RootStore } from '..';\n\nexport type Rect = {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n};\n\nexport const getBoundedPosition = (store: RootStore, rect: Rect, excludeTrashZone?: boolean) => {\n    const boundingRect = getNoteBoardSize(store);\n    const trashZoneBoundingRect = getTrashZoneBoundingRect(store);\n    const trashZoneWidth = trashZoneBoundingRect.right - trashZoneBoundingRect.left;\n    const { x, y, width, height } = rect;\n    const extra = excludeTrashZone ? trashZoneWidth : 0;\n    return {\n        x: Math.min(Math.max(x, 0), boundingRect.width - width - extra),\n        y: Math.min(Math.max(y, 0), boundingRect.height - height),\n    };\n};\n\nexport const getNoteBoardSize = (store: RootStore) => store.noteBoard.size;\n\nexport const isTrashZoneActive = (store: RootStore) => store.noteBoard.isTrashZoneActive;\n\nexport const getTrashZoneBoundingRect = (store: RootStore) => store.noteBoard.trashZoneBoundingRect;\n\nexport const isRectIntersectsTrashZone = (store: RootStore, rect: Rect) => {\n    const { top, bottom, left, right } = getTrashZoneBoundingRect(store);\n    return (\n        rect.y + rect.height > top &&\n        rect.x + rect.width > left &&\n        rect.y < bottom &&\n        rect.x < right\n    );\n};\n","import { RootStore } from '..';\nimport { NoteId } from './types';\nimport { getBoundedPosition } from '../noteBoard/getters';\n\nexport const getNoteById = (store: RootStore, id: NoteId) => store.notes.notes[id];\n\nexport const getEditingNoteId = (store: RootStore) => store.notes.editingNoteId;\n\nexport const getOrderedNotes = (store: RootStore) =>\n    store.notes.order.map((noteId) => getNoteById(store, noteId));\n\nexport const getBoundedNoteById = (store: RootStore, id: NoteId) => {\n    const note = getNoteById(store, id);\n    return {\n        ...note,\n        position: getBoundedPosition(store, { ...note.position, ...note.size }, !note.isMoving),\n    };\n};\n","import { Note, NoteId } from '../store/note/types';\n\nexport type FetchNotesResult = {\n    status: string;\n    result: {\n        notes: { [key: number]: Note };\n        order: NoteId[];\n    };\n};\n\nconst DEFAULT_NOTE = {\n    id: new Date().getTime(),\n    text: 'Double click to edit...',\n    color: '#efee9d',\n    size: { width: 300, height: 300 },\n    position: { x: 340, y: 50 },\n};\n\nexport const fetchNotesAsync = (): Promise<FetchNotesResult> =>\n    new Promise((resolve) => {\n        setTimeout(() => {\n            const isInitialized = JSON.parse(localStorage.getItem('initialized') || 'false');\n            let order;\n            let notes;\n            if (isInitialized) {\n                order = JSON.parse(localStorage.getItem('order') || '[]');\n                notes = JSON.parse(localStorage.getItem('notes') || '{}');\n            } else {\n                notes = {\n                    [DEFAULT_NOTE.id]: { ...DEFAULT_NOTE },\n                };\n\n                order = [DEFAULT_NOTE.id];\n                localStorage.setItem('notes', JSON.stringify(notes));\n                localStorage.setItem('order', JSON.stringify(order));\n                localStorage.setItem('initialized', JSON.stringify(true));\n            }\n\n            resolve({\n                status: 'success',\n                result: {\n                    notes,\n                    order,\n                },\n            });\n        });\n    });\n","import { Note, NoteId } from '../store/note/types';\n\nexport type UpdateNoteResult = {\n    status: string;\n};\n\nexport const updateNoteAsync = (noteData: Note): Promise<UpdateNoteResult> =>\n    new Promise((resolve) => {\n        setTimeout(() => {\n            const notes = JSON.parse(localStorage.getItem('notes') || '{}');\n            const { id: noteId } = noteData;\n            if (!notes[noteId]) {\n                return;\n            }\n            notes[noteId] = noteData;\n\n            localStorage.setItem('notes', JSON.stringify(notes));\n\n            let order = JSON.parse(localStorage.getItem('order') || '[]');\n\n            order = order.sort((a: NoteId, b: NoteId) => {\n                if (a === noteId) {\n                    return 1;\n                }\n                if (b === noteId) {\n                    return -1;\n                }\n                return 0;\n            });\n\n            localStorage.setItem('order', JSON.stringify(order));\n\n            resolve({\n                status: 'success',\n            });\n        });\n    });\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type NoteBoardSliceState = {\n    size: { width: number; height: number };\n    trashZoneBoundingRect: BoundingRect;\n    isTrashZoneActive: boolean;\n};\n\nexport type BoundingRect = {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n};\n\nconst noteBoardSlice = createSlice({\n    name: 'noteBoard',\n    initialState: {\n        size: { width: 0, height: 0 },\n        trashZoneBoundingRect: { top: 0, bottom: 0, left: 0, right: 0 },\n        isTrashZoneActive: false,\n    } as NoteBoardSliceState,\n    reducers: {\n        applyNoteBoardBoundingRect(state, { payload }: PayloadAction<BoundingRect>) {\n            const { top, bottom, left, right } = payload;\n            state.size = {\n                width: right - left,\n                height: bottom - top,\n            };\n        },\n        setTrashZoneBoundingRect(state, { payload }: PayloadAction<BoundingRect>) {\n            state.trashZoneBoundingRect = payload;\n        },\n        setTrashZoneStatus(state, { payload }: PayloadAction<boolean>) {\n            state.isTrashZoneActive = payload;\n        },\n    },\n});\n\nconst { actions, reducer } = noteBoardSlice;\n\nexport const { applyNoteBoardBoundingRect, setTrashZoneBoundingRect, setTrashZoneStatus } = actions;\n\nexport default reducer;\n","import { ActionsObservable, StateObservable, Epic } from 'redux-observable';\nimport { fromEvent, from, of } from 'rxjs';\nimport { pluck, filter, map, tap, mergeMap, switchMap, takeUntil } from 'rxjs/operators';\nimport { createAction, Action } from '@reduxjs/toolkit';\nimport { fetchNotesAsync, FetchNotesResult } from '../../api/fetchNotesAsync';\nimport { RootStore } from '..';\nimport { NoteId } from './types';\nimport {\n    fetchNoteSuccess,\n    updateNote,\n    stopEditNote,\n    removeNote,\n    startMoveNote,\n    startResizeNote,\n    releaseNote,\n} from './slice';\nimport { updateNoteAsync } from '../../api/updateNoteAsync';\nimport { getNoteById, getEditingNoteId, getBoundedNoteById } from './getters';\nimport {\n    getBoundedPosition,\n    getNoteBoardSize,\n    isRectIntersectsTrashZone,\n} from '../noteBoard/getters';\nimport { deleteNoteAsync } from '../../api/deleteNoteAsync';\nimport { applyNoteBoardBoundingRect, setTrashZoneStatus } from '../noteBoard/slice';\n\nconst STICKY_NOTE_MIN_SIZE = 100; // px\n\nconst mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\nconst mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\nconst fetchNotes = createAction('fetchNotes');\n\nconst checkStopEditingNote = createAction('checkStopEditingNote');\n\nconst checkNeedRemoveNote = createAction<NoteId>('checkNeedRemoveNote');\n\nconst fetchNotesEpic: Epic = (action$: ActionsObservable<Action>) => {\n    return action$.pipe(\n        filter(fetchNotes.match),\n        switchMap(fetchNotesAsync),\n        map(({ result }: FetchNotesResult) => fetchNoteSuccess(result))\n    );\n};\n\nconst moveNoteEpic: Epic = (\n    action$: ActionsObservable<Action>,\n    state$: StateObservable<RootStore>\n) =>\n    action$.pipe(\n        filter(startMoveNote.match),\n        pluck('payload'),\n        map(({ id, pickPosition }) => ({\n            targetNote: getBoundedNoteById(state$.value, id),\n            pickPosition,\n        })),\n        switchMap(({ targetNote, pickPosition }) =>\n            mousemove$.pipe(\n                mergeMap((move) => {\n                    move.preventDefault();\n                    const { position } = targetNote;\n\n                    const updatedNote = {\n                        ...targetNote,\n                        position: getBoundedPosition(state$.value, {\n                            x: position.x + (move.clientX - pickPosition.x),\n                            y: position.y + (move.clientY - pickPosition.y),\n                            ...targetNote.size,\n                        }),\n                    };\n\n                    return of(\n                        updateNote(updatedNote),\n                        setTrashZoneStatus(\n                            isRectIntersectsTrashZone(state$.value, {\n                                ...updatedNote.size,\n                                ...updatedNote.position,\n                            })\n                        )\n                    );\n                }),\n                takeUntil(\n                    mouseup$.pipe(\n                        map(() => getNoteById(state$.value, targetNote.id)),\n                        tap((note) => note && updateNoteAsync(note))\n                    )\n                )\n            )\n        )\n    );\n\nconst checkNeedRemoveNoteEpic: Epic = (\n    action$: ActionsObservable<Action>,\n    state$: StateObservable<RootStore>\n) =>\n    action$.pipe(\n        filter(checkNeedRemoveNote.match),\n        pluck('payload'),\n        map((id) => getNoteById(state$.value, id)),\n        mergeMap((note) => {\n            if (!note.isMoving) {\n                return of(setTrashZoneStatus(false));\n            }\n\n            if (isRectIntersectsTrashZone(state$.value, { ...note.position, ...note.size })) {\n                deleteNoteAsync(note.id);\n                return of(removeNote(note.id), setTrashZoneStatus(false));\n            }\n            return of(releaseNote(note.id), setTrashZoneStatus(false));\n        })\n    );\n\nconst resizeNoteEpic: Epic = (\n    action$: ActionsObservable<Action>,\n    state$: StateObservable<RootStore>\n) =>\n    action$.pipe(\n        filter(startResizeNote.match),\n        pluck('payload'),\n        map((id) => getNoteById(state$.value, id)),\n        switchMap((targetNote) =>\n            mousemove$.pipe(\n                map((move) => {\n                    move.preventDefault();\n                    const { position } = targetNote;\n                    const calculatedWidth = move.clientX - position.x;\n                    const calculatedHeight = move.clientY - position.y;\n                    const boardSize = getNoteBoardSize(state$.value);\n                    const updatedSize = {\n                        width: Math.min(\n                            Math.max(STICKY_NOTE_MIN_SIZE, calculatedWidth),\n                            boardSize.width\n                        ),\n                        height: Math.min(\n                            Math.max(STICKY_NOTE_MIN_SIZE, calculatedHeight),\n                            boardSize.height\n                        ),\n                    };\n                    const updatedPosition = getBoundedPosition(\n                        state$.value,\n                        { ...updatedSize, ...targetNote.position },\n                        true\n                    );\n                    const updatedNote = {\n                        ...targetNote,\n                        size: updatedSize,\n                        position: updatedPosition,\n                    };\n                    return updateNote(updatedNote);\n                }),\n                takeUntil(\n                    mouseup$.pipe(\n                        map(() => getNoteById(state$.value, targetNote.id)),\n                        tap((note) => note && updateNoteAsync(note))\n                    )\n                )\n            )\n        )\n    );\n\nconst noteBoardSizeUpdateEpic: Epic = (\n    action$: ActionsObservable<Action>,\n    state$: StateObservable<RootStore>\n) =>\n    action$.pipe(\n        filter(applyNoteBoardBoundingRect.match),\n        pluck('payload'),\n        mergeMap(() => {\n            return from(state$.value.notes.order as []);\n        }),\n        map((id) => getBoundedNoteById(state$.value, id)),\n        map(updateNote)\n    );\n\nconst checkStopEditingNoteEpic: Epic = (\n    action$: ActionsObservable<Action>,\n    state$: StateObservable<RootStore>\n) =>\n    action$.pipe(\n        filter(checkStopEditingNote.match),\n        map(() => getEditingNoteId(state$.value)),\n        filter((id) => id !== undefined),\n        map((id) => getNoteById(state$.value, id as number)),\n        tap(updateNoteAsync),\n        map(() => stopEditNote())\n    );\n\nexport const noteEpics = [\n    fetchNotesEpic,\n    moveNoteEpic,\n    resizeNoteEpic,\n    checkStopEditingNoteEpic,\n    checkNeedRemoveNoteEpic,\n    noteBoardSizeUpdateEpic,\n];\n\nexport { fetchNotes, checkStopEditingNote, checkNeedRemoveNote };\n","import { NoteId } from '../store/note/types';\n\nexport type UpdateNoteResult = {\n    status: string;\n};\n\nexport const deleteNoteAsync = (noteId: NoteId): Promise<UpdateNoteResult> =>\n    new Promise((resolve) => {\n        setTimeout(() => {\n            const notes = JSON.parse(localStorage.getItem('notes') || '{}');\n            if (!notes[noteId]) {\n                return;\n            }\n            delete notes[noteId];\n\n            localStorage.setItem('notes', JSON.stringify(notes));\n\n            let order = JSON.parse(localStorage.getItem('order') || '[]');\n\n            order = order.filter((orderedNoteId: NoteId) => orderedNoteId !== noteId);\n\n            localStorage.setItem('order', JSON.stringify(order));\n\n            resolve({\n                status: 'success',\n            });\n        });\n    });\n","import React from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { RootStore } from '../../store';\nimport { NoteId } from '../../store/note/types';\nimport { startResizeNote, releaseNote, bringToFrontNote } from '../../store/note/slice';\n\nimport styles from './styles.module.css';\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst NoteResizer = (props: Props) => {\n    const { noteId } = props;\n    return (\n        <div\n            className={styles.Stretcher_root}\n            onMouseDown={(e) => {\n                e.stopPropagation();\n                props.bringToFrontNote(noteId);\n                props.startResizeNote(noteId);\n            }}\n            onMouseUp={() => props.releaseNote(noteId)}\n            onMouseOut={() => props.releaseNote(noteId)}\n            onBlur={() => props.releaseNote(noteId)}\n        />\n    );\n};\n\nconst mapStateToProps = (state: RootStore, { noteId }: { noteId: NoteId }) => ({\n    noteId,\n});\n\nconst mapDispatchToProps = {\n    startResizeNote,\n    bringToFrontNote,\n    releaseNote,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connector(NoteResizer);\n","import React, { useEffect, useRef, MutableRefObject } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { RootStore } from '../../store';\nimport { NoteId } from '../../store/note/types';\nimport { getNoteById, getEditingNoteId } from '../../store/note/getters';\nimport { checkNeedRemoveNote } from '../../store/note/epics';\nimport {\n    startEditNote,\n    updateNoteText,\n    bringToFrontNote,\n    startMoveNote,\n} from '../../store/note/slice';\n\nimport styles from './styles.module.css';\nimport NoteResizer from '../NoteResizer';\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst Note = (props: Props) => {\n    const { note, isActive } = props;\n    const { id, text, position, size, color } = note;\n    const componentStyle = {\n        left: position.x,\n        top: position.y,\n        width: size.width,\n        height: size.height,\n        backgroundColor: color,\n    };\n\n    const editableTextRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\n\n    const checkDrop = () => {\n        props.checkNeedRemoveNote(id);\n    };\n\n    useEffect(() => {\n        if (isActive) {\n            const textArea = editableTextRef.current;\n            textArea.focus();\n            textArea.selectionStart = textArea.value.length;\n            textArea.selectionEnd = textArea.value.length;\n        }\n    });\n\n    return (\n        <div className={styles.Note_root} style={componentStyle}>\n            {isActive ? (\n                <textarea\n                    ref={editableTextRef}\n                    className={styles.editableText}\n                    value={text}\n                    onClick={(e) => e.stopPropagation()}\n                    onChange={(e) => props.updateNoteText({ id, text: e.target.value })}\n                />\n            ) : (\n                <div\n                    className={styles.textContainer}\n                    onDoubleClick={() => props.startEditNote(id)}\n                    onMouseDown={(e) => {\n                        props.bringToFrontNote(id);\n                        props.startMoveNote({\n                            id,\n                            pickPosition: { x: e.clientX, y: e.clientY },\n                        });\n                    }}\n                    onMouseUp={checkDrop}\n                    onMouseOut={checkDrop}\n                    onBlur={checkDrop}\n                >\n                    {text}\n                    <NoteResizer noteId={id} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: RootStore, { noteId }: { noteId: NoteId }) => ({\n    isActive: noteId === getEditingNoteId(state),\n    note: getNoteById(state, noteId),\n});\n\nconst mapDispatchToProps = {\n    startMoveNote,\n    startEditNote,\n    updateNoteText,\n    bringToFrontNote,\n    checkNeedRemoveNote,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connector(Note);\n","import React, { useLayoutEffect } from 'react';\nimport { ActionCreatorWithPayload } from '@reduxjs/toolkit';\n\ntype Props = React.PropsWithChildren<{\n    captureRef: React.MutableRefObject<HTMLElement>;\n    onResize: ActionCreatorWithPayload<{\n        top: number;\n        bottom: number;\n        left: number;\n        right: number;\n    }>;\n}>;\n\nexport const ResizeCapturer = (props: Props) => {\n    const { captureRef } = props;\n\n    const updateSize = () => {\n        const { top, bottom, left, right } = captureRef.current.getBoundingClientRect();\n        props.onResize({ top, bottom, left, right });\n    };\n\n    useLayoutEffect(() => {\n        updateSize();\n        window.addEventListener('resize', updateSize);\n        return () => window.removeEventListener('resize', updateSize);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <>{props.children}</>;\n};\n","import React, { useRef, MutableRefObject } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { RootStore } from '../../store';\nimport { Note as NoteData } from '../../store/note/types';\n\nimport styles from './styles.module.css';\nimport Note from '../Note';\nimport { getOrderedNotes } from '../../store/note/getters';\nimport { checkStopEditingNote } from '../../store/note/epics';\nimport { applyNoteBoardBoundingRect, setTrashZoneBoundingRect } from '../../store/noteBoard/slice';\nimport { ResizeCapturer } from '../ResizeCapturer';\nimport { isTrashZoneActive } from '../../store/noteBoard/getters';\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst NoteBoard = (props: Props) => {\n    const boardRef = useRef() as MutableRefObject<HTMLDivElement>;\n    const trashZoneRef = useRef() as MutableRefObject<HTMLDivElement>;\n\n    const trashZoneActiveClass = props.isTrashZoneActive ? styles.trashZoneActive : '';\n    return (\n        <ResizeCapturer captureRef={boardRef} onResize={props.applyNoteBoardBoundingRect}>\n            <div\n                ref={boardRef}\n                className={styles.NoteBoard_root}\n                onClick={() => props.checkStopEditingNote()}\n            >\n                <ResizeCapturer captureRef={trashZoneRef} onResize={props.setTrashZoneBoundingRect}>\n                    <div\n                        ref={trashZoneRef}\n                        className={`${styles.trashZone} ${trashZoneActiveClass}`}\n                    >\n                        Drop here to remove\n                    </div>\n                </ResizeCapturer>\n                {props.notes.map((note: NoteData) => (\n                    <Note key={note.id} noteId={note.id} />\n                ))}\n            </div>\n        </ResizeCapturer>\n    );\n};\n\nconst mapStateToProps = (state: RootStore) => ({\n    notes: getOrderedNotes(state),\n    isTrashZoneActive: isTrashZoneActive(state),\n});\n\nconst mapDispatchToProps = {\n    checkStopEditingNote,\n    applyNoteBoardBoundingRect,\n    setTrashZoneBoundingRect,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connector(NoteBoard);\n","import React, { useEffect } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport Menu from '../Menu';\nimport NoteBoard from '../NoteBoard';\nimport { fetchNotes } from '../../store/note/epics';\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst App = (props: Props) => {\n    useEffect(() => {\n        props.fetchNotes();\n    });\n    return (\n        <>\n            <Menu />\n            <NoteBoard />\n        </>\n    );\n};\n\nconst mapDispatchToProps = {\n    fetchNotes,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(App);\n","import { createEpicMiddleware, combineEpics } from 'redux-observable';\nimport { compose } from 'redux';\nimport { getDefaultMiddleware, configureStore } from '@reduxjs/toolkit';\nimport noteReducer from './note/slice';\nimport noteBoardReducer from './noteBoard/slice';\nimport menuReducer from './menu/slice';\nimport { noteEpics } from './note/epics';\nimport { menuEpics } from './menu/epics';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        notes: noteReducer,\n        noteBoard: noteBoardReducer,\n        menu: menuReducer,\n    },\n    middleware: [epicMiddleware, ...getDefaultMiddleware({ thunk: false })],\n});\n\nepicMiddleware.run(combineEpics(...noteEpics, ...menuEpics));\n\nexport type RootStore = ReturnType<typeof store.getState>;\nexport { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport { store } from './store';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}